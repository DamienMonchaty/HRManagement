// <auto-generated />
using System;
using HRManagement.Business.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRManagement.Business.Migrations
{
    [DbContext(typeof(ModelDbContext))]
    [Migration("20221025133720_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HRManagement.Common.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street3")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "ville",
                            Street1 = "rue1",
                            Street2 = "opt rue2",
                            Street3 = "opt rue2",
                            ZipCode = "cp000"
                        },
                        new
                        {
                            Id = 2,
                            City = "ville",
                            Street1 = "rue1",
                            Street2 = "opt rue2",
                            Street3 = "opt rue2",
                            ZipCode = "cp000"
                        },
                        new
                        {
                            Id = 3,
                            City = "ville",
                            Street1 = "rue1",
                            Street2 = "opt rue2",
                            Street3 = "opt rue2",
                            ZipCode = "cp000"
                        },
                        new
                        {
                            Id = 4,
                            City = "ville",
                            Street1 = "rue1",
                            Street2 = "opt rue2",
                            Street3 = "opt rue2",
                            ZipCode = "cp000"
                        },
                        new
                        {
                            Id = 5,
                            City = "ville",
                            Street1 = "rue1",
                            Street2 = "opt rue2",
                            Street3 = "opt rue2",
                            ZipCode = "cp000"
                        },
                        new
                        {
                            Id = 6,
                            City = "ville",
                            Street1 = "rue1",
                            Street2 = "opt rue2",
                            Street3 = "opt rue2",
                            ZipCode = "cp000"
                        });
                });

            modelBuilder.Entity("HRManagement.Common.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "desc1",
                            Status = 1,
                            Title = "titre1",
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "desc2",
                            Status = 1,
                            Title = "titre2",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "desc3",
                            Status = 1,
                            Title = "titre3",
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "desc4",
                            Status = 1,
                            Title = "titre4",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "desc5",
                            Status = 1,
                            Title = "titre5",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Description = "desc6",
                            Status = 1,
                            Title = "titre6",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("HRManagement.Common.Models.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("RhEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("RhEmployeeId")
                        .IsUnique()
                        .HasFilter("[RhEmployeeId] IS NOT NULL");

                    b.ToTable("enterprises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 4,
                            RhEmployeeId = 6
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 5,
                            RhEmployeeId = 6
                        });
                });

            modelBuilder.Entity("HRManagement.Common.Models.Holidays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("holydays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2018, 12, 27, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2018, 12, 27, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2018, 12, 27, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2018, 12, 27, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2018, 12, 27, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2018, 12, 27, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("HRManagement.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BirthCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AddressId = 1,
                            BirthCountry = "pays1",
                            BirthDate = new DateTime(2015, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            BirthPlace = "villeNaissance1",
                            Email = "email1@email.fr",
                            FirstName = "nom1",
                            LastName = "prenom1",
                            Nationality = "Nat1",
                            Password = "$2a$11$ZeDQgbYx.pZw0jk/0QLCHeqTqG8.tsP5xGJPSIBBMtQaA4C.1TB0u",
                            Role = "User",
                            Sexe = "sexe1",
                            UserName = "prenom1"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            AddressId = 2,
                            BirthCountry = "pays2",
                            BirthDate = new DateTime(2015, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            BirthPlace = "villeNaissance2",
                            Email = "email2@email.fr",
                            FirstName = "nom2",
                            LastName = "prenom2",
                            Nationality = "Nat2",
                            Password = "$2a$11$3vXLNE2bJuv3KtYDx9j7iesLbV8I/bqXrWVovKhRaF20QLcZCZwai",
                            Role = "Admin",
                            Sexe = "sexe1",
                            UserName = "prenom2"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            AddressId = 3,
                            BirthCountry = "pays3",
                            BirthDate = new DateTime(2015, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            BirthPlace = "villeNaissance3",
                            Email = "email3@email.fr",
                            FirstName = "nom3",
                            LastName = "prenom3",
                            Nationality = "Nat3",
                            Password = "$2a$11$A4DkDPqB/sUmAX31STQvmOngLRaT1T.gJael60dhf4Pd99JDX9hC2",
                            Role = "Admin",
                            Sexe = "sexe3",
                            UserName = "prenom3"
                        });
                });

            modelBuilder.Entity("HRManagement.Common.Models.Employee", b =>
                {
                    b.HasBaseType("HRManagement.Common.Models.User");

                    b.Property<double>("AdditionalIndemnity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CommitmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Experience")
                        .HasColumnType("real");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RawSalary")
                        .HasColumnType("float");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<float>("Seniority")
                        .HasColumnType("real");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Active = true,
                            AddressId = 4,
                            BirthCountry = "pays2",
                            BirthDate = new DateTime(2015, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            BirthPlace = "villeNaissance4",
                            Email = "email4@email.fr",
                            FirstName = "nom4",
                            LastName = "prenom4",
                            Nationality = "Nat2",
                            Password = "$2a$11$nNG338ageYtgQQy8uKH8d.9cm/ldMPCBi50Bn.6dlPE3WVtAadOV2",
                            Role = "User",
                            Sexe = "sexe2",
                            UserName = "prenom4",
                            AdditionalIndemnity = 200.0,
                            CommitmentDate = new DateTime(2019, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            ContractDuration = "ContratDuration1",
                            ContractType = "ContratType1",
                            Experience = 10f,
                            Fonction = "Fonction1",
                            MaritalStatus = "Status1",
                            RawSalary = 1000.0,
                            RegistrationNumber = "RegistrationNumber4",
                            Salary = 1200.0,
                            Seniority = 5f,
                            SocialSecurityNumber = "SocialSecurityNumber4"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            AddressId = 5,
                            BirthCountry = "pays1",
                            BirthDate = new DateTime(2015, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            BirthPlace = "villeNaissance5",
                            Email = "email5@email.fr",
                            FirstName = "nom5",
                            LastName = "prenom5",
                            Nationality = "Nat1",
                            Password = "$2a$11$DWKprphQsU0cpyFVOa7dNe5H4qcPO1Cu4DPTm08mzVHMFCQVImy.6",
                            Role = "User",
                            Sexe = "sexe1",
                            UserName = "prenom5",
                            AdditionalIndemnity = 200.0,
                            CommitmentDate = new DateTime(2019, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            ContractDuration = "ContratDuration2",
                            ContractType = "ContratType2",
                            Experience = 10f,
                            Fonction = "Fonction1",
                            MaritalStatus = "Status2",
                            RawSalary = 1000.0,
                            RegistrationNumber = "RegistrationNumber5",
                            Salary = 1200.0,
                            Seniority = 5f,
                            SocialSecurityNumber = "SocialSecurityNumber5"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            AddressId = 6,
                            BirthCountry = "pays2",
                            BirthDate = new DateTime(2015, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            BirthPlace = "villeNaissance6",
                            Email = "email6@email.fr",
                            FirstName = "nom6",
                            LastName = "prenom6",
                            Nationality = "Nat2",
                            Password = "$2a$11$nB2kZkbvd7GOW5J24gF9U.E/MO.lxfrbUxm6IIYZTipZ8.fMXWjZW",
                            Role = "User",
                            Sexe = "sexe6",
                            UserName = "prenom6",
                            AdditionalIndemnity = 200.0,
                            CommitmentDate = new DateTime(2019, 12, 25, 10, 30, 45, 0, DateTimeKind.Unspecified),
                            ContractDuration = "ContratDuration1",
                            ContractType = "ContratType1",
                            Experience = 10f,
                            Fonction = "Fonction1",
                            MaritalStatus = "Status1",
                            RawSalary = 1000.0,
                            RegistrationNumber = "RegistrationNumber6",
                            Salary = 1200.0,
                            Seniority = 5f,
                            SocialSecurityNumber = "SocialSecurityNumber6"
                        });
                });

            modelBuilder.Entity("HRManagement.Common.Models.Appointment", b =>
                {
                    b.HasOne("HRManagement.Common.Models.Employee", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Employes_AppointmentsGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRManagement.Common.Models.Enterprise", b =>
                {
                    b.HasOne("HRManagement.Common.Models.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("HRManagement.Common.Models.Enterprise", "EmployeeId");

                    b.HasOne("HRManagement.Common.Models.Employee", "RhEmployee")
                        .WithOne()
                        .HasForeignKey("HRManagement.Common.Models.Enterprise", "RhEmployeeId");

                    b.Navigation("Employee");

                    b.Navigation("RhEmployee");
                });

            modelBuilder.Entity("HRManagement.Common.Models.Holidays", b =>
                {
                    b.HasOne("HRManagement.Common.Models.Employee", null)
                        .WithMany("Holidays")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Employes_HolidaysGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRManagement.Common.Models.User", b =>
                {
                    b.HasOne("HRManagement.Common.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("HRManagement.Common.Models.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HRManagement.Common.Models.Employee", b =>
                {
                    b.HasOne("HRManagement.Common.Models.User", null)
                        .WithOne()
                        .HasForeignKey("HRManagement.Common.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRManagement.Common.Models.Address", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("HRManagement.Common.Models.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");
                });
#pragma warning restore 612, 618
        }
    }
}
